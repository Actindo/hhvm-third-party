/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "mcrouter/lib/network/gen-cpp2/mc_caret_protocol_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McGetRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "flags") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McGetRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McGetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McGetRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McGetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McGetRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McGetRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.flags) {
    xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->flags);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McGetReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "value") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "flags") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "message") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McGetReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McGetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeBinary(this->value);
  }
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 5);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McGetReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McGetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeZCBinary(this->value);
  }
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 5);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McGetReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McGetReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.value) {
    xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeBinary(this->value);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.flags) {
    xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 3);
    xfer += prot_->writeI64(this->flags);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 5);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McSetRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "exptime") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "flags") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McSetRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McSetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McSetRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McSetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McSetRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McSetRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->exptime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->flags);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McSetReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "flags") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "message") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McSetReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McSetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeBinary(this->value);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 5);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McSetReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McSetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeZCBinary(this->value);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 5);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McSetReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McSetReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.flags) {
    xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->flags);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeBinary(this->value);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 5);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McDeleteRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "flags") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "exptime") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McDeleteRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McDeleteRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.exptime) {
    xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 3);
    xfer += prot_->serializedSizeI32(this->exptime);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeBinary(this->value);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McDeleteRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McDeleteRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.exptime) {
    xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 3);
    xfer += prot_->serializedSizeI32(this->exptime);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeZCBinary(this->value);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McDeleteRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McDeleteRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.flags) {
    xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->flags);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.exptime) {
    xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 3);
    xfer += prot_->writeI32(this->exptime);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeBinary(this->value);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McDeleteReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "flags") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "message") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McDeleteReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McDeleteReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeBinary(this->value);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 5);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McDeleteReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McDeleteReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeZCBinary(this->value);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 5);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McDeleteReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McDeleteReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.flags) {
    xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->flags);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeBinary(this->value);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 4);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 5);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McLeaseGetRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McLeaseGetRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McLeaseGetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McLeaseGetRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McLeaseGetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McLeaseGetRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McLeaseGetRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McLeaseGetReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "leaseToken") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "flags") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "message") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaseToken);
          this->__isset.leaseToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McLeaseGetReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McLeaseGetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.leaseToken) {
    xfer += prot_->serializedFieldSize("leaseToken", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->leaseToken);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeBinary(this->value);
  }
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 4);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 6);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McLeaseGetReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McLeaseGetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.leaseToken) {
    xfer += prot_->serializedFieldSize("leaseToken", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->leaseToken);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeZCBinary(this->value);
  }
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 4);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 6);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McLeaseGetReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McLeaseGetReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.leaseToken) {
    xfer += prot_->writeFieldBegin("leaseToken", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->leaseToken);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeBinary(this->value);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.flags) {
    xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 4);
    xfer += prot_->writeI64(this->flags);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 6);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McLeaseSetRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "exptime") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "flags") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "leaseToken") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->leaseToken);
          this->__isset.leaseToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McLeaseSetRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McLeaseSetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->value);
  xfer += prot_->serializedFieldSize("leaseToken", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->leaseToken);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McLeaseSetRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McLeaseSetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->value);
  xfer += prot_->serializedFieldSize("leaseToken", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->leaseToken);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McLeaseSetRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McLeaseSetRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->exptime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->flags);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("leaseToken", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->writeI64(this->leaseToken);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McLeaseSetReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McLeaseSetReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McLeaseSetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McLeaseSetReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McLeaseSetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McLeaseSetReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McLeaseSetReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McAddRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "exptime") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "flags") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McAddRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McAddRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McAddRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McAddRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McAddRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McAddRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->exptime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->flags);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McAddReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McAddReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McAddReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McAddReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McAddReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McAddReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McAddReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McReplaceRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "exptime") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "flags") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McReplaceRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McReplaceRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McReplaceRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McReplaceRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McReplaceRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McReplaceRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->exptime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->flags);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McReplaceReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McReplaceReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McReplaceReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McReplaceReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McReplaceReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McReplaceReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McReplaceReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McGetsRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McGetsRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McGetsRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McGetsRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McGetsRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McGetsRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McGetsRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McGetsReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "casToken") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "flags") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "message") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->casToken);
          this->__isset.casToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McGetsReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McGetsReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.casToken) {
    xfer += prot_->serializedFieldSize("casToken", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->casToken);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeBinary(this->value);
  }
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 4);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 6);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McGetsReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McGetsReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.casToken) {
    xfer += prot_->serializedFieldSize("casToken", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->casToken);
  }
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeZCBinary(this->value);
  }
  if (this->__isset.flags) {
    xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 4);
    xfer += prot_->serializedSizeI64(this->flags);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 6);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McGetsReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McGetsReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.casToken) {
    xfer += prot_->writeFieldBegin("casToken", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->casToken);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.value) {
    xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeBinary(this->value);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.flags) {
    xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 4);
    xfer += prot_->writeI64(this->flags);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 6);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McCasRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "exptime") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "flags") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "casToken") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->casToken);
          this->__isset.casToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McCasRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McCasRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->value);
  xfer += prot_->serializedFieldSize("casToken", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->casToken);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McCasRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McCasRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->value);
  xfer += prot_->serializedFieldSize("casToken", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->serializedSizeI64(this->casToken);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McCasRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McCasRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->exptime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->flags);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("casToken", apache::thrift::protocol::T_I64, 5);
  xfer += prot_->writeI64(this->casToken);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McCasReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McCasReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McCasReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McCasReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McCasReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McCasReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McCasReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McIncrRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "delta") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->delta);
          this->__isset.delta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McIncrRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McIncrRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("delta", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->delta);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McIncrRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McIncrRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("delta", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->delta);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McIncrRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McIncrRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("delta", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->delta);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McIncrReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "delta") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "message") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->delta);
          this->__isset.delta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McIncrReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McIncrReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.delta) {
    xfer += prot_->serializedFieldSize("delta", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->delta);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McIncrReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McIncrReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.delta) {
    xfer += prot_->serializedFieldSize("delta", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->delta);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McIncrReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McIncrReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.delta) {
    xfer += prot_->writeFieldBegin("delta", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->delta);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McDecrRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "delta") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->delta);
          this->__isset.delta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McDecrRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McDecrRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("delta", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->delta);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McDecrRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McDecrRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("delta", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->delta);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McDecrRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McDecrRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("delta", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->delta);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McDecrReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "delta") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "message") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->delta);
          this->__isset.delta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McDecrReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McDecrReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.delta) {
    xfer += prot_->serializedFieldSize("delta", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->delta);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McDecrReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McDecrReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.delta) {
    xfer += prot_->serializedFieldSize("delta", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->serializedSizeI64(this->delta);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McDecrReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McDecrReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.delta) {
    xfer += prot_->writeFieldBegin("delta", apache::thrift::protocol::T_I64, 2);
    xfer += prot_->writeI64(this->delta);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McMetagetRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McMetagetRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McMetagetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McMetagetRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McMetagetRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McMetagetRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McMetagetRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McMetagetReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "age") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "exptime") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ipv") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "ipAddress") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "message") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 7;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->age);
          this->__isset.age = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->ipv);
          this->__isset.ipv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipAddress);
          this->__isset.ipAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McMetagetReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McMetagetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.age) {
    xfer += prot_->serializedFieldSize("age", apache::thrift::protocol::T_I32, 2);
    xfer += prot_->serializedSizeI32(this->age);
  }
  if (this->__isset.exptime) {
    xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 3);
    xfer += prot_->serializedSizeI32(this->exptime);
  }
  if (this->__isset.ipv) {
    xfer += prot_->serializedFieldSize("ipv", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->ipv);
  }
  if (this->__isset.ipAddress) {
    xfer += prot_->serializedFieldSize("ipAddress", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeString(this->ipAddress);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 6);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 7);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McMetagetReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McMetagetReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.age) {
    xfer += prot_->serializedFieldSize("age", apache::thrift::protocol::T_I32, 2);
    xfer += prot_->serializedSizeI32(this->age);
  }
  if (this->__isset.exptime) {
    xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 3);
    xfer += prot_->serializedSizeI32(this->exptime);
  }
  if (this->__isset.ipv) {
    xfer += prot_->serializedFieldSize("ipv", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->ipv);
  }
  if (this->__isset.ipAddress) {
    xfer += prot_->serializedFieldSize("ipAddress", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->serializedSizeString(this->ipAddress);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 6);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 7);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McMetagetReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McMetagetReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.age) {
    xfer += prot_->writeFieldBegin("age", apache::thrift::protocol::T_I32, 2);
    xfer += prot_->writeI32(this->age);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.exptime) {
    xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 3);
    xfer += prot_->writeI32(this->exptime);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.ipv) {
    xfer += prot_->writeFieldBegin("ipv", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->writeI16(this->ipv);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.ipAddress) {
    xfer += prot_->writeFieldBegin("ipAddress", apache::thrift::protocol::T_STRING, 5);
    xfer += prot_->writeString(this->ipAddress);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 6);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 7);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McVersionRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McVersionRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McVersionRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McVersionRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McVersionRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McVersionRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McVersionRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McVersionReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "value") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "message") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McVersionReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McVersionReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeBinary(this->value);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McVersionReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McVersionReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.value) {
    xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeZCBinary(this->value);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McVersionReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McVersionReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.value) {
    xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeBinary(this->value);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McAppendRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "exptime") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "flags") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McAppendRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McAppendRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McAppendRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McAppendRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McAppendRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McAppendRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->exptime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->flags);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McAppendReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McAppendReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McAppendReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McAppendReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McAppendReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McAppendReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McAppendReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McPrependRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "exptime") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "flags") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->flags);
          this->__isset.flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McPrependRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McPrependRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McPrependRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McPrependRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedFieldSize("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->flags);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->serializedSizeZCBinary(this->value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McPrependRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McPrependRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->exptime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("flags", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->flags);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_STRING, 4);
  xfer += prot_->writeBinary(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McPrependReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McPrependReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McPrependReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McPrependReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McPrependReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McPrependReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McPrependReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McTouchRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "exptime") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exptime);
          this->__isset.exptime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McTouchRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McTouchRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McTouchRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McTouchRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedFieldSize("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(this->exptime);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McTouchRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McTouchRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("exptime", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(this->exptime);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McTouchReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McTouchReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McTouchReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McTouchReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McTouchReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McTouchReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McTouchReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McStatsRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McStatsRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McStatsRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McStatsRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McStatsRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McStatsRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McStatsRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <typename T_McStatsReply_stats_struct_setter>
std::vector<std::string>& McStatsReply::set_stats(T_McStatsReply_stats_struct_setter&& stats_) {
  stats = std::forward<T_McStatsReply_stats_struct_setter>(stats_);
  __isset.stats = true;
  return stats;
}

template <class Protocol_>
uint32_t McStatsReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "stats") {
        fid = 3;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->stats = std::vector<std::string>();
          uint32_t _size0;
          apache::thrift::protocol::TType _etype3;
          xfer += iprot->readListBegin(_etype3, _size0);
          uint32_t _i4;
          if (_size0 == std::numeric_limits<uint32_t>::max()) {
            for (_i4 = 0; iprot->peekList(); _i4++) {
              this->stats.resize(_i4 + 1);
              xfer += iprot->readString(this->stats[_i4]);
            }
          }
          else {
            this->stats.resize(_size0);
            for (_i4 = 0; _i4 < _size0; ++_i4) {
              xfer += iprot->readString(this->stats[_i4]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.stats = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McStatsReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McStatsReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.stats) {
    xfer += prot_->serializedFieldSize("stats", apache::thrift::protocol::T_LIST, 3);
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->stats.size());
    for (auto _iter5 = this->stats.begin(); _iter5 != this->stats.end(); ++_iter5) {
      xfer += prot_->serializedSizeString((*_iter5));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McStatsReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McStatsReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.stats) {
    xfer += prot_->serializedFieldSize("stats", apache::thrift::protocol::T_LIST, 3);
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, this->stats.size());
    for (auto _iter6 = this->stats.begin(); _iter6 != this->stats.end(); ++_iter6) {
      xfer += prot_->serializedSizeString((*_iter6));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McStatsReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McStatsReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.stats) {
    xfer += prot_->writeFieldBegin("stats", apache::thrift::protocol::T_LIST, 3);
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, this->stats.size());
    for (auto _iter7 = this->stats.begin(); _iter7 != this->stats.end(); ++_iter7) {
      xfer += prot_->writeString((*_iter7));
    }
    xfer += prot_->writeListEnd();
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McShutdownRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McShutdownRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McShutdownRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McShutdownRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McShutdownRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McShutdownRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McShutdownRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McShutdownReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McShutdownReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McShutdownReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McShutdownReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McShutdownReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McShutdownReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McShutdownReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McQuitRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McQuitRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McQuitRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McQuitRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McQuitRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McQuitRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McQuitRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McQuitReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McQuitReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McQuitReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McQuitReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McQuitReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McQuitReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McQuitReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McExecRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McExecRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McExecRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McExecRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McExecRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McExecRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McExecRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McExecReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "response") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "message") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->response);
          this->__isset.response = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McExecReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McExecReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.response) {
    xfer += prot_->serializedFieldSize("response", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->response);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McExecReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McExecReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.response) {
    xfer += prot_->serializedFieldSize("response", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->response);
  }
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McExecReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McExecReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.response) {
    xfer += prot_->writeFieldBegin("response", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->response);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 3);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 4);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McFlushReRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McFlushReRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McFlushReRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McFlushReRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McFlushReRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McFlushReRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McFlushReRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McFlushReReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McFlushReReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McFlushReReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McFlushReReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McFlushReReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McFlushReReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McFlushReReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McFlushAllRequest::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "key") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "delay") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->delay);
          this->__isset.delay = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McFlushAllRequest::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McFlushAllRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(this->key);
  if (this->__isset.delay) {
    xfer += prot_->serializedFieldSize("delay", apache::thrift::protocol::T_I32, 2);
    xfer += prot_->serializedSizeI32(this->delay);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McFlushAllRequest::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McFlushAllRequest");
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(this->key);
  if (this->__isset.delay) {
    xfer += prot_->serializedFieldSize("delay", apache::thrift::protocol::T_I32, 2);
    xfer += prot_->serializedSizeI32(this->delay);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McFlushAllRequest::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McFlushAllRequest");
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(this->key);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.delay) {
    xfer += prot_->writeFieldBegin("delay", apache::thrift::protocol::T_I32, 2);
    xfer += prot_->writeI32(this->delay);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template <class Protocol_>
uint32_t McFlushAllReply::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "result") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I16;
      }
      else if (fname == "message") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "appSpecificErrorCode") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I16;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->appSpecificErrorCode);
          this->__isset.appSpecificErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t McFlushAllReply::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McFlushAllReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McFlushAllReply::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("McFlushAllReply");
  xfer += prot_->serializedFieldSize("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->serializedSizeI16(this->result);
  if (this->__isset.message) {
    xfer += prot_->serializedFieldSize("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(this->message);
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->serializedFieldSize("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->serializedSizeI16(this->appSpecificErrorCode);
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t McFlushAllReply::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("McFlushAllReply");
  xfer += prot_->writeFieldBegin("result", apache::thrift::protocol::T_I16, 1);
  xfer += prot_->writeI16(this->result);
  xfer += prot_->writeFieldEnd();
  if (this->__isset.message) {
    xfer += prot_->writeFieldBegin("message", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(this->message);
    xfer += prot_->writeFieldEnd();
  }
  if (this->__isset.appSpecificErrorCode) {
    xfer += prot_->writeFieldBegin("appSpecificErrorCode", apache::thrift::protocol::T_I16, 3);
    xfer += prot_->writeI16(this->appSpecificErrorCode);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

}}} // facebook::memcache::cpp2