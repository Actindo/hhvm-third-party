/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "mcrouter/lib/network/gen-cpp2/mc_caret_protocol_types.h"

#include "mcrouter/lib/network/gen-cpp2/mc_caret_protocol_types.tcc"

#include <algorithm>

namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McGetRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McGetRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McGetRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McGetRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McGetRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McGetRequest::__clear() {
  key = folly::IOBuf();
  flags = 0;
  __isset.__clear();
}

bool McGetRequest::operator==(const McGetRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (__isset.flags != rhs.__isset.flags) {
    return false;
  }
  else if (__isset.flags && !((flags == rhs.flags))) {
    return false;
  }
  return true;
}

void swap(McGetRequest& a, McGetRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.flags, b.flags);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McGetReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McGetReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McGetReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McGetReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McGetReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McGetReply::__clear() {
  result = 0;
  value = folly::IOBuf();
  flags = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McGetReply::operator==(const McGetReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.value != rhs.__isset.value) {
    return false;
  }
  else if (__isset.value && !(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  if (__isset.flags != rhs.__isset.flags) {
    return false;
  }
  else if (__isset.flags && !((flags == rhs.flags))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McGetReply& a, McGetReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.value, b.value);
  swap(a.flags, b.flags);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McSetRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McSetRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McSetRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McSetRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McSetRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McSetRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McSetRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McSetRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McSetRequest::__clear() {
  key = folly::IOBuf();
  exptime = 0;
  flags = 0;
  value = folly::IOBuf();
  __isset.__clear();
}

bool McSetRequest::operator==(const McSetRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((exptime == rhs.exptime))) {
    return false;
  }
  if (!((flags == rhs.flags))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  return true;
}

void swap(McSetRequest& a, McSetRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.exptime, b.exptime);
  swap(a.flags, b.flags);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McSetReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McSetReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McSetReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McSetReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McSetReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McSetReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McSetReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McSetReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McSetReply::__clear() {
  result = 0;
  flags = 0;
  value = folly::IOBuf();
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McSetReply::operator==(const McSetReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.flags != rhs.__isset.flags) {
    return false;
  }
  else if (__isset.flags && !((flags == rhs.flags))) {
    return false;
  }
  if (__isset.value != rhs.__isset.value) {
    return false;
  }
  else if (__isset.value && !(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McSetReply& a, McSetReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.flags, b.flags);
  swap(a.value, b.value);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McDeleteRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McDeleteRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDeleteRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDeleteRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDeleteRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McDeleteRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McDeleteRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McDeleteRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McDeleteRequest::__clear() {
  key = folly::IOBuf();
  flags = 0;
  exptime = 0;
  value = folly::IOBuf();
  __isset.__clear();
}

bool McDeleteRequest::operator==(const McDeleteRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (__isset.flags != rhs.__isset.flags) {
    return false;
  }
  else if (__isset.flags && !((flags == rhs.flags))) {
    return false;
  }
  if (__isset.exptime != rhs.__isset.exptime) {
    return false;
  }
  else if (__isset.exptime && !((exptime == rhs.exptime))) {
    return false;
  }
  if (__isset.value != rhs.__isset.value) {
    return false;
  }
  else if (__isset.value && !(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  return true;
}

void swap(McDeleteRequest& a, McDeleteRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.flags, b.flags);
  swap(a.exptime, b.exptime);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McDeleteReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McDeleteReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDeleteReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDeleteReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDeleteReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McDeleteReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McDeleteReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McDeleteReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McDeleteReply::__clear() {
  result = 0;
  flags = 0;
  value = folly::IOBuf();
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McDeleteReply::operator==(const McDeleteReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.flags != rhs.__isset.flags) {
    return false;
  }
  else if (__isset.flags && !((flags == rhs.flags))) {
    return false;
  }
  if (__isset.value != rhs.__isset.value) {
    return false;
  }
  else if (__isset.value && !(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McDeleteReply& a, McDeleteReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.flags, b.flags);
  swap(a.value, b.value);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McLeaseGetRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McLeaseGetRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseGetRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseGetRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseGetRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McLeaseGetRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McLeaseGetRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McLeaseGetRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McLeaseGetRequest::__clear() {
  key = folly::IOBuf();
  __isset.__clear();
}

bool McLeaseGetRequest::operator==(const McLeaseGetRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  return true;
}

void swap(McLeaseGetRequest& a, McLeaseGetRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McLeaseGetReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McLeaseGetReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseGetReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseGetReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseGetReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McLeaseGetReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McLeaseGetReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McLeaseGetReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McLeaseGetReply::__clear() {
  result = 0;
  leaseToken = 0;
  value = folly::IOBuf();
  flags = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McLeaseGetReply::operator==(const McLeaseGetReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.leaseToken != rhs.__isset.leaseToken) {
    return false;
  }
  else if (__isset.leaseToken && !((leaseToken == rhs.leaseToken))) {
    return false;
  }
  if (__isset.value != rhs.__isset.value) {
    return false;
  }
  else if (__isset.value && !(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  if (__isset.flags != rhs.__isset.flags) {
    return false;
  }
  else if (__isset.flags && !((flags == rhs.flags))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McLeaseGetReply& a, McLeaseGetReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.leaseToken, b.leaseToken);
  swap(a.value, b.value);
  swap(a.flags, b.flags);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McLeaseSetRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McLeaseSetRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseSetRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseSetRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseSetRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McLeaseSetRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McLeaseSetRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McLeaseSetRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McLeaseSetRequest::__clear() {
  key = folly::IOBuf();
  exptime = 0;
  flags = 0;
  value = folly::IOBuf();
  leaseToken = 0;
  __isset.__clear();
}

bool McLeaseSetRequest::operator==(const McLeaseSetRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((exptime == rhs.exptime))) {
    return false;
  }
  if (!((flags == rhs.flags))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  if (!((leaseToken == rhs.leaseToken))) {
    return false;
  }
  return true;
}

void swap(McLeaseSetRequest& a, McLeaseSetRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.exptime, b.exptime);
  swap(a.flags, b.flags);
  swap(a.value, b.value);
  swap(a.leaseToken, b.leaseToken);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McLeaseSetReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McLeaseSetReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseSetReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseSetReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McLeaseSetReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McLeaseSetReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McLeaseSetReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McLeaseSetReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McLeaseSetReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McLeaseSetReply::operator==(const McLeaseSetReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McLeaseSetReply& a, McLeaseSetReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McAddRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McAddRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAddRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAddRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAddRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McAddRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McAddRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McAddRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McAddRequest::__clear() {
  key = folly::IOBuf();
  exptime = 0;
  flags = 0;
  value = folly::IOBuf();
  __isset.__clear();
}

bool McAddRequest::operator==(const McAddRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((exptime == rhs.exptime))) {
    return false;
  }
  if (!((flags == rhs.flags))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  return true;
}

void swap(McAddRequest& a, McAddRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.exptime, b.exptime);
  swap(a.flags, b.flags);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McAddReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McAddReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAddReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAddReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAddReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McAddReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McAddReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McAddReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McAddReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McAddReply::operator==(const McAddReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McAddReply& a, McAddReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McReplaceRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McReplaceRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McReplaceRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McReplaceRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McReplaceRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McReplaceRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McReplaceRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McReplaceRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McReplaceRequest::__clear() {
  key = folly::IOBuf();
  exptime = 0;
  flags = 0;
  value = folly::IOBuf();
  __isset.__clear();
}

bool McReplaceRequest::operator==(const McReplaceRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((exptime == rhs.exptime))) {
    return false;
  }
  if (!((flags == rhs.flags))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  return true;
}

void swap(McReplaceRequest& a, McReplaceRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.exptime, b.exptime);
  swap(a.flags, b.flags);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McReplaceReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McReplaceReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McReplaceReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McReplaceReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McReplaceReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McReplaceReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McReplaceReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McReplaceReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McReplaceReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McReplaceReply::operator==(const McReplaceReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McReplaceReply& a, McReplaceReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McGetsRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McGetsRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetsRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetsRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetsRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McGetsRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McGetsRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McGetsRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McGetsRequest::__clear() {
  key = folly::IOBuf();
  __isset.__clear();
}

bool McGetsRequest::operator==(const McGetsRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  return true;
}

void swap(McGetsRequest& a, McGetsRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McGetsReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McGetsReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetsReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetsReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McGetsReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McGetsReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McGetsReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McGetsReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McGetsReply::__clear() {
  result = 0;
  casToken = 0;
  value = folly::IOBuf();
  flags = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McGetsReply::operator==(const McGetsReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.casToken != rhs.__isset.casToken) {
    return false;
  }
  else if (__isset.casToken && !((casToken == rhs.casToken))) {
    return false;
  }
  if (__isset.value != rhs.__isset.value) {
    return false;
  }
  else if (__isset.value && !(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  if (__isset.flags != rhs.__isset.flags) {
    return false;
  }
  else if (__isset.flags && !((flags == rhs.flags))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McGetsReply& a, McGetsReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.casToken, b.casToken);
  swap(a.value, b.value);
  swap(a.flags, b.flags);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McCasRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McCasRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McCasRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McCasRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McCasRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McCasRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McCasRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McCasRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McCasRequest::__clear() {
  key = folly::IOBuf();
  exptime = 0;
  flags = 0;
  value = folly::IOBuf();
  casToken = 0;
  __isset.__clear();
}

bool McCasRequest::operator==(const McCasRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((exptime == rhs.exptime))) {
    return false;
  }
  if (!((flags == rhs.flags))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  if (!((casToken == rhs.casToken))) {
    return false;
  }
  return true;
}

void swap(McCasRequest& a, McCasRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.exptime, b.exptime);
  swap(a.flags, b.flags);
  swap(a.value, b.value);
  swap(a.casToken, b.casToken);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McCasReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McCasReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McCasReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McCasReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McCasReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McCasReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McCasReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McCasReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McCasReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McCasReply::operator==(const McCasReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McCasReply& a, McCasReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McIncrRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McIncrRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McIncrRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McIncrRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McIncrRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McIncrRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McIncrRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McIncrRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McIncrRequest::__clear() {
  key = folly::IOBuf();
  delta = 0;
  __isset.__clear();
}

bool McIncrRequest::operator==(const McIncrRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((delta == rhs.delta))) {
    return false;
  }
  return true;
}

void swap(McIncrRequest& a, McIncrRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.delta, b.delta);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McIncrReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McIncrReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McIncrReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McIncrReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McIncrReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McIncrReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McIncrReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McIncrReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McIncrReply::__clear() {
  result = 0;
  delta = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McIncrReply::operator==(const McIncrReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.delta != rhs.__isset.delta) {
    return false;
  }
  else if (__isset.delta && !((delta == rhs.delta))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McIncrReply& a, McIncrReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.delta, b.delta);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McDecrRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McDecrRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDecrRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDecrRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDecrRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McDecrRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McDecrRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McDecrRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McDecrRequest::__clear() {
  key = folly::IOBuf();
  delta = 0;
  __isset.__clear();
}

bool McDecrRequest::operator==(const McDecrRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((delta == rhs.delta))) {
    return false;
  }
  return true;
}

void swap(McDecrRequest& a, McDecrRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.delta, b.delta);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McDecrReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McDecrReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDecrReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDecrReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McDecrReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McDecrReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McDecrReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McDecrReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McDecrReply::__clear() {
  result = 0;
  delta = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McDecrReply::operator==(const McDecrReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.delta != rhs.__isset.delta) {
    return false;
  }
  else if (__isset.delta && !((delta == rhs.delta))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McDecrReply& a, McDecrReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.delta, b.delta);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McMetagetRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McMetagetRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McMetagetRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McMetagetRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McMetagetRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McMetagetRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McMetagetRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McMetagetRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McMetagetRequest::__clear() {
  key = folly::IOBuf();
  __isset.__clear();
}

bool McMetagetRequest::operator==(const McMetagetRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  return true;
}

void swap(McMetagetRequest& a, McMetagetRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McMetagetReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McMetagetReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McMetagetReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McMetagetReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McMetagetReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McMetagetReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McMetagetReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McMetagetReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McMetagetReply::__clear() {
  result = 0;
  age = 0;
  exptime = 0;
  ipv = 0;
  ipAddress = std::string();
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McMetagetReply::operator==(const McMetagetReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.age != rhs.__isset.age) {
    return false;
  }
  else if (__isset.age && !((age == rhs.age))) {
    return false;
  }
  if (__isset.exptime != rhs.__isset.exptime) {
    return false;
  }
  else if (__isset.exptime && !((exptime == rhs.exptime))) {
    return false;
  }
  if (__isset.ipv != rhs.__isset.ipv) {
    return false;
  }
  else if (__isset.ipv && !((ipv == rhs.ipv))) {
    return false;
  }
  if (__isset.ipAddress != rhs.__isset.ipAddress) {
    return false;
  }
  else if (__isset.ipAddress && !((ipAddress == rhs.ipAddress))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McMetagetReply& a, McMetagetReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.age, b.age);
  swap(a.exptime, b.exptime);
  swap(a.ipv, b.ipv);
  swap(a.ipAddress, b.ipAddress);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McVersionRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McVersionRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McVersionRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McVersionRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McVersionRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McVersionRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McVersionRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McVersionRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McVersionRequest::__clear() {
  key = folly::IOBuf();
  __isset.__clear();
}

bool McVersionRequest::operator==(const McVersionRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  return true;
}

void swap(McVersionRequest& a, McVersionRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McVersionReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McVersionReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McVersionReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McVersionReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McVersionReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McVersionReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McVersionReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McVersionReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McVersionReply::__clear() {
  result = 0;
  value = folly::IOBuf();
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McVersionReply::operator==(const McVersionReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.value != rhs.__isset.value) {
    return false;
  }
  else if (__isset.value && !(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McVersionReply& a, McVersionReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.value, b.value);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McAppendRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McAppendRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAppendRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAppendRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAppendRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McAppendRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McAppendRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McAppendRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McAppendRequest::__clear() {
  key = folly::IOBuf();
  exptime = 0;
  flags = 0;
  value = folly::IOBuf();
  __isset.__clear();
}

bool McAppendRequest::operator==(const McAppendRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((exptime == rhs.exptime))) {
    return false;
  }
  if (!((flags == rhs.flags))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  return true;
}

void swap(McAppendRequest& a, McAppendRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.exptime, b.exptime);
  swap(a.flags, b.flags);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McAppendReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McAppendReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAppendReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAppendReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McAppendReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McAppendReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McAppendReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McAppendReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McAppendReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McAppendReply::operator==(const McAppendReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McAppendReply& a, McAppendReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McPrependRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McPrependRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McPrependRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McPrependRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McPrependRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McPrependRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McPrependRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McPrependRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McPrependRequest::__clear() {
  key = folly::IOBuf();
  exptime = 0;
  flags = 0;
  value = folly::IOBuf();
  __isset.__clear();
}

bool McPrependRequest::operator==(const McPrependRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((exptime == rhs.exptime))) {
    return false;
  }
  if (!((flags == rhs.flags))) {
    return false;
  }
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(value, rhs.value))) {
    return false;
  }
  return true;
}

void swap(McPrependRequest& a, McPrependRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.exptime, b.exptime);
  swap(a.flags, b.flags);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McPrependReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McPrependReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McPrependReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McPrependReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McPrependReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McPrependReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McPrependReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McPrependReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McPrependReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McPrependReply::operator==(const McPrependReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McPrependReply& a, McPrependReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McTouchRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McTouchRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McTouchRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McTouchRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McTouchRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McTouchRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McTouchRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McTouchRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McTouchRequest::__clear() {
  key = folly::IOBuf();
  exptime = 0;
  __isset.__clear();
}

bool McTouchRequest::operator==(const McTouchRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (!((exptime == rhs.exptime))) {
    return false;
  }
  return true;
}

void swap(McTouchRequest& a, McTouchRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.exptime, b.exptime);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McTouchReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McTouchReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McTouchReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McTouchReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McTouchReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McTouchReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McTouchReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McTouchReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McTouchReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McTouchReply::operator==(const McTouchReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McTouchReply& a, McTouchReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McStatsRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McStatsRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McStatsRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McStatsRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McStatsRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McStatsRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McStatsRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McStatsRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McStatsRequest::__clear() {
  key = folly::IOBuf();
  __isset.__clear();
}

bool McStatsRequest::operator==(const McStatsRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  return true;
}

void swap(McStatsRequest& a, McStatsRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McStatsReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McStatsReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McStatsReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McStatsReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McStatsReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McStatsReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McStatsReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McStatsReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McStatsReply::__clear() {
  result = 0;
  message = std::string();
  stats.clear();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McStatsReply::operator==(const McStatsReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.stats != rhs.__isset.stats) {
    return false;
  }
  else if (__isset.stats && !((stats == rhs.stats))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

const std::vector<std::string>* McStatsReply::get_stats() const& {
  return __isset.stats ? std::addressof(stats) : nullptr;
}

std::vector<std::string>* McStatsReply::get_stats() & {
  return __isset.stats ? std::addressof(stats) : nullptr;
}

void swap(McStatsReply& a, McStatsReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.stats, b.stats);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McShutdownRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McShutdownRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McShutdownRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McShutdownRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McShutdownRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McShutdownRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McShutdownRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McShutdownRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McShutdownRequest::__clear() {
  key = folly::IOBuf();
  __isset.__clear();
}

bool McShutdownRequest::operator==(const McShutdownRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  return true;
}

void swap(McShutdownRequest& a, McShutdownRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McShutdownReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McShutdownReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McShutdownReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McShutdownReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McShutdownReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McShutdownReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McShutdownReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McShutdownReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McShutdownReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McShutdownReply::operator==(const McShutdownReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McShutdownReply& a, McShutdownReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McQuitRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McQuitRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McQuitRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McQuitRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McQuitRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McQuitRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McQuitRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McQuitRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McQuitRequest::__clear() {
  key = folly::IOBuf();
  __isset.__clear();
}

bool McQuitRequest::operator==(const McQuitRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  return true;
}

void swap(McQuitRequest& a, McQuitRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McQuitReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McQuitReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McQuitReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McQuitReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McQuitReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McQuitReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McQuitReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McQuitReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McQuitReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McQuitReply::operator==(const McQuitReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McQuitReply& a, McQuitReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McExecRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McExecRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McExecRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McExecRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McExecRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McExecRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McExecRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McExecRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McExecRequest::__clear() {
  key = folly::IOBuf();
  __isset.__clear();
}

bool McExecRequest::operator==(const McExecRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  return true;
}

void swap(McExecRequest& a, McExecRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McExecReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McExecReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McExecReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McExecReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McExecReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McExecReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McExecReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McExecReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McExecReply::__clear() {
  result = 0;
  response = std::string();
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McExecReply::operator==(const McExecReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.response != rhs.__isset.response) {
    return false;
  }
  else if (__isset.response && !((response == rhs.response))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McExecReply& a, McExecReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.response, b.response);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McFlushReRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McFlushReRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushReRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushReRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushReRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McFlushReRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McFlushReRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McFlushReRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McFlushReRequest::__clear() {
  key = folly::IOBuf();
  __isset.__clear();
}

bool McFlushReRequest::operator==(const McFlushReRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  return true;
}

void swap(McFlushReRequest& a, McFlushReRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McFlushReReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McFlushReReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushReReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushReReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushReReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McFlushReReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McFlushReReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McFlushReReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McFlushReReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McFlushReReply::operator==(const McFlushReReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McFlushReReply& a, McFlushReReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McFlushAllRequest::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McFlushAllRequest::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushAllRequest::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushAllRequest::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushAllRequest::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McFlushAllRequest::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McFlushAllRequest::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McFlushAllRequest::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McFlushAllRequest::__clear() {
  key = folly::IOBuf();
  delay = 0;
  __isset.__clear();
}

bool McFlushAllRequest::operator==(const McFlushAllRequest& rhs) const {
  if (!(apache::thrift::StringTraits<folly::IOBuf>::isEqual(key, rhs.key))) {
    return false;
  }
  if (__isset.delay != rhs.__isset.delay) {
    return false;
  }
  else if (__isset.delay && !((delay == rhs.delay))) {
    return false;
  }
  return true;
}

void swap(McFlushAllRequest& a, McFlushAllRequest& b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.delay, b.delay);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

template uint32_t McFlushAllReply::read<apache::thrift::BinaryProtocolReader>(apache::thrift::BinaryProtocolReader*);
template uint32_t McFlushAllReply::write<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushAllReply::serializedSize<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushAllReply::serializedSizeZC<apache::thrift::BinaryProtocolWriter>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t McFlushAllReply::read<apache::thrift::CompactProtocolReader>(apache::thrift::CompactProtocolReader*);
template uint32_t McFlushAllReply::write<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McFlushAllReply::serializedSize<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t McFlushAllReply::serializedSizeZC<apache::thrift::CompactProtocolWriter>(apache::thrift::CompactProtocolWriter*) const;

void McFlushAllReply::__clear() {
  result = 0;
  message = std::string();
  appSpecificErrorCode = 0;
  __isset.__clear();
}

bool McFlushAllReply::operator==(const McFlushAllReply& rhs) const {
  if (!((result == rhs.result))) {
    return false;
  }
  if (__isset.message != rhs.__isset.message) {
    return false;
  }
  else if (__isset.message && !((message == rhs.message))) {
    return false;
  }
  if (__isset.appSpecificErrorCode != rhs.__isset.appSpecificErrorCode) {
    return false;
  }
  else if (__isset.appSpecificErrorCode && !((appSpecificErrorCode == rhs.appSpecificErrorCode))) {
    return false;
  }
  return true;
}

void swap(McFlushAllReply& a, McFlushAllReply& b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.message, b.message);
  swap(a.appSpecificErrorCode, b.appSpecificErrorCode);
  swap(a.__isset, b.__isset);
}

}}} // facebook::memcache::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace facebook { namespace memcache { namespace cpp2 {

}}} // facebook::memcache::cpp2