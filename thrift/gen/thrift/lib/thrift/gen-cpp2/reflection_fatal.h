/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/fatal/reflection.h>

#include <fatal/type/list.h>
#include <fatal/type/pair.h>
#include <fatal/type/sequence.h>

#include "thrift/lib/thrift/gen-cpp2/reflection_types.h"
namespace apache { namespace thrift { namespace reflection {

namespace thrift_fatal_impl_detail {

struct apache_thrift_reflection_cpp2_reflection__unique_strings_list {
  using TYPE_STRING = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'S', 'T', 'R', 'I', 'N', 'G'>;
  using valueType = ::fatal::sequence<char, 'v', 'a', 'l', 'u', 'e', 'T', 'y', 'p', 'e'>;
  using mapKeyType = ::fatal::sequence<char, 'm', 'a', 'p', 'K', 'e', 'y', 'T', 'y', 'p', 'e'>;
  using TYPE_LIST = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'L', 'I', 'S', 'T'>;
  using names = ::fatal::sequence<char, 'n', 'a', 'm', 'e', 's'>;
  using TYPE_ENUM = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'E', 'N', 'U', 'M'>;
  using Type = ::fatal::sequence<char, 'T', 'y', 'p', 'e'>;
  using Schema = ::fatal::sequence<char, 'S', 'c', 'h', 'e', 'm', 'a'>;
  using TYPE_SET = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'S', 'E', 'T'>;
  using TYPE_I64 = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'I', '6', '4'>;
  using enumValues = ::fatal::sequence<char, 'e', 'n', 'u', 'm', 'V', 'a', 'l', 'u', 'e', 's'>;
  using TYPE_VOID = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'V', 'O', 'I', 'D'>;
  using name = ::fatal::sequence<char, 'n', 'a', 'm', 'e'>;
  using TYPE_MAP = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'M', 'A', 'P'>;
  using dataTypes = ::fatal::sequence<char, 'd', 'a', 't', 'a', 'T', 'y', 'p', 'e', 's'>;
  using TYPE_STRUCT = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'S', 'T', 'R', 'U', 'C', 'T'>;
  using type = ::fatal::sequence<char, 't', 'y', 'p', 'e'>;
  using annotations = ::fatal::sequence<char, 'a', 'n', 'n', 'o', 't', 'a', 't', 'i', 'o', 'n', 's'>;
  using apache__thrift__reflection = ::fatal::sequence<char, 'a', 'p', 'a', 'c', 'h', 'e', ':', ':', 't', 'h', 'r', 'i', 'f', 't', ':', ':', 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using TYPE_I32 = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'I', '3', '2'>;
  using isRequired = ::fatal::sequence<char, 'i', 's', 'R', 'e', 'q', 'u', 'i', 'r', 'e', 'd'>;
  using TYPE_DOUBLE = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'D', 'O', 'U', 'B', 'L', 'E'>;
  using TYPE_PROGRAM = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'P', 'R', 'O', 'G', 'R', 'A', 'M'>;
  using TYPE_SERVICE = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'S', 'E', 'R', 'V', 'I', 'C', 'E'>;
  using TYPE_I16 = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'I', '1', '6'>;
  using reflection = ::fatal::sequence<char, 'r', 'e', 'f', 'l', 'e', 'c', 't', 'i', 'o', 'n'>;
  using TYPE_BOOL = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'B', 'O', 'O', 'L'>;
  using DataType = ::fatal::sequence<char, 'D', 'a', 't', 'a', 'T', 'y', 'p', 'e'>;
  using fields = ::fatal::sequence<char, 'f', 'i', 'e', 'l', 'd', 's'>;
  using StructField = ::fatal::sequence<char, 'S', 't', 'r', 'u', 'c', 't', 'F', 'i', 'e', 'l', 'd'>;
  using order = ::fatal::sequence<char, 'o', 'r', 'd', 'e', 'r'>;
  using cpp = ::fatal::sequence<char, 'c', 'p', 'p'>;
  using TYPE_BYTE = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'B', 'Y', 'T', 'E'>;
  using TYPE_FLOAT = ::fatal::sequence<char, 'T', 'Y', 'P', 'E', '_', 'F', 'L', 'O', 'A', 'T'>;
};

} // thrift_fatal_impl_detail
class reflection_tags {
  struct apache_thrift_reflection_cpp2_reflection__unique_languages_list {
    using cpp = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::cpp;
  };

  struct apache_thrift_reflection_cpp2_reflection__unique_enums_list {
    using Type = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::Type;
  };

  struct apache_thrift_reflection_cpp2_reflection__unique_unions_list {
  };

  struct apache_thrift_reflection_cpp2_reflection__unique_structs_list {
    using StructField = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::StructField;
    using DataType = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::DataType;
    using Schema = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::Schema;
  };

  struct apache_thrift_reflection_cpp2_reflection__unique_constants_list {
  };

  struct apache_thrift_reflection_cpp2_reflection__unique_services_list {
  };

public:
  struct module {};

  using languages = apache_thrift_reflection_cpp2_reflection__unique_languages_list;
  using enums = apache_thrift_reflection_cpp2_reflection__unique_enums_list;
  using unions = apache_thrift_reflection_cpp2_reflection__unique_unions_list;
  using structs = apache_thrift_reflection_cpp2_reflection__unique_structs_list;
  using constants = apache_thrift_reflection_cpp2_reflection__unique_constants_list;
  using services = apache_thrift_reflection_cpp2_reflection__unique_services_list;

  using strings = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list;
};

THRIFT_REGISTER_REFLECTION_METADATA(
  reflection_tags::module,
  thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::reflection,
  // languages
  ::fatal::list<
    ::fatal::pair<thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::cpp, thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::apache__thrift__reflection>
  >,
  // enums
  ::fatal::list<
    ::fatal::pair<Type, thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::Type>
  >,
  // unions
  ::fatal::list<
  >,
  // structs
  ::fatal::list<
    ::fatal::pair<StructField, thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::StructField>,
    ::fatal::pair<DataType, thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::DataType>,
    ::fatal::pair<Schema, thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::Schema>
  >,
  // constants
  ::fatal::list<
  >,
  // services
  ::fatal::list<
  >
);

}}} // apache::thrift::reflection
namespace apache { namespace thrift { namespace reflection { namespace cpp2 {

using reflection_tags = apache::thrift::reflection::reflection_tags;

}}}} // apache::thrift::reflection::cpp2
#include "thrift/lib/thrift/gen-cpp2/reflection_fatal_types.h"
