/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/lib/thrift/gen-cpp2/reflection_types.h"
#include "thrift/lib/thrift/gen-cpp2/reflection_fatal.h"

#include <fatal/type/enum.h>

#include <type_traits>

namespace apache { namespace thrift { namespace reflection {

namespace thrift_fatal_impl_detail {

struct Type_enum_traits {
  using type = ::apache::thrift::reflection::Type;
  using name = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::Type;

  struct Type__struct_unique_strings_list {
    using TYPE_VOID = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_VOID;
    using TYPE_STRING = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_STRING;
    using TYPE_BOOL = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_BOOL;
    using TYPE_BYTE = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_BYTE;
    using TYPE_I16 = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_I16;
    using TYPE_I32 = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_I32;
    using TYPE_I64 = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_I64;
    using TYPE_DOUBLE = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_DOUBLE;
    using TYPE_ENUM = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_ENUM;
    using TYPE_LIST = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_LIST;
    using TYPE_SET = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_SET;
    using TYPE_MAP = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_MAP;
    using TYPE_STRUCT = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_STRUCT;
    using TYPE_SERVICE = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_SERVICE;
    using TYPE_PROGRAM = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_PROGRAM;
    using TYPE_FLOAT = thrift_fatal_impl_detail::apache_thrift_reflection_cpp2_reflection__unique_strings_list::TYPE_FLOAT;
  };

  struct Type__struct_enum_members_TYPE_VOID {
    using name = Type__struct_unique_strings_list::TYPE_VOID;
    using value = std::integral_constant<type, type::TYPE_VOID>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_STRING {
    using name = Type__struct_unique_strings_list::TYPE_STRING;
    using value = std::integral_constant<type, type::TYPE_STRING>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_BOOL {
    using name = Type__struct_unique_strings_list::TYPE_BOOL;
    using value = std::integral_constant<type, type::TYPE_BOOL>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_BYTE {
    using name = Type__struct_unique_strings_list::TYPE_BYTE;
    using value = std::integral_constant<type, type::TYPE_BYTE>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_I16 {
    using name = Type__struct_unique_strings_list::TYPE_I16;
    using value = std::integral_constant<type, type::TYPE_I16>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_I32 {
    using name = Type__struct_unique_strings_list::TYPE_I32;
    using value = std::integral_constant<type, type::TYPE_I32>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_I64 {
    using name = Type__struct_unique_strings_list::TYPE_I64;
    using value = std::integral_constant<type, type::TYPE_I64>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_DOUBLE {
    using name = Type__struct_unique_strings_list::TYPE_DOUBLE;
    using value = std::integral_constant<type, type::TYPE_DOUBLE>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_ENUM {
    using name = Type__struct_unique_strings_list::TYPE_ENUM;
    using value = std::integral_constant<type, type::TYPE_ENUM>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_LIST {
    using name = Type__struct_unique_strings_list::TYPE_LIST;
    using value = std::integral_constant<type, type::TYPE_LIST>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_SET {
    using name = Type__struct_unique_strings_list::TYPE_SET;
    using value = std::integral_constant<type, type::TYPE_SET>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_MAP {
    using name = Type__struct_unique_strings_list::TYPE_MAP;
    using value = std::integral_constant<type, type::TYPE_MAP>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_STRUCT {
    using name = Type__struct_unique_strings_list::TYPE_STRUCT;
    using value = std::integral_constant<type, type::TYPE_STRUCT>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_SERVICE {
    using name = Type__struct_unique_strings_list::TYPE_SERVICE;
    using value = std::integral_constant<type, type::TYPE_SERVICE>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_PROGRAM {
    using name = Type__struct_unique_strings_list::TYPE_PROGRAM;
    using value = std::integral_constant<type, type::TYPE_PROGRAM>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members_TYPE_FLOAT {
    using name = Type__struct_unique_strings_list::TYPE_FLOAT;
    using value = std::integral_constant<type, type::TYPE_FLOAT>;

    class annotations {
      public:
      using keys = void;
      using values = void;
      using map = ::fatal::list<
      >;
    };
  };

  struct Type__struct_enum_members {
    using TYPE_VOID = Type__struct_enum_members_TYPE_VOID;
    using TYPE_STRING = Type__struct_enum_members_TYPE_STRING;
    using TYPE_BOOL = Type__struct_enum_members_TYPE_BOOL;
    using TYPE_BYTE = Type__struct_enum_members_TYPE_BYTE;
    using TYPE_I16 = Type__struct_enum_members_TYPE_I16;
    using TYPE_I32 = Type__struct_enum_members_TYPE_I32;
    using TYPE_I64 = Type__struct_enum_members_TYPE_I64;
    using TYPE_DOUBLE = Type__struct_enum_members_TYPE_DOUBLE;
    using TYPE_ENUM = Type__struct_enum_members_TYPE_ENUM;
    using TYPE_LIST = Type__struct_enum_members_TYPE_LIST;
    using TYPE_SET = Type__struct_enum_members_TYPE_SET;
    using TYPE_MAP = Type__struct_enum_members_TYPE_MAP;
    using TYPE_STRUCT = Type__struct_enum_members_TYPE_STRUCT;
    using TYPE_SERVICE = Type__struct_enum_members_TYPE_SERVICE;
    using TYPE_PROGRAM = Type__struct_enum_members_TYPE_PROGRAM;
    using TYPE_FLOAT = Type__struct_enum_members_TYPE_FLOAT;
  };

  using member = Type__struct_enum_members;

  using fields = ::fatal::list<
      member::TYPE_VOID,
      member::TYPE_STRING,
      member::TYPE_BOOL,
      member::TYPE_BYTE,
      member::TYPE_I16,
      member::TYPE_I32,
      member::TYPE_I64,
      member::TYPE_DOUBLE,
      member::TYPE_ENUM,
      member::TYPE_LIST,
      member::TYPE_SET,
      member::TYPE_MAP,
      member::TYPE_STRUCT,
      member::TYPE_SERVICE,
      member::TYPE_PROGRAM,
      member::TYPE_FLOAT
  >;

  class annotations {
    public:
    using keys = void;
    using values = void;
    using map = ::fatal::list<
    >;
  };

  static char const *to_string(type e, char const *fallback) {
    switch (e) {
      case type::TYPE_VOID: return "TYPE_VOID";
      case type::TYPE_STRING: return "TYPE_STRING";
      case type::TYPE_BOOL: return "TYPE_BOOL";
      case type::TYPE_BYTE: return "TYPE_BYTE";
      case type::TYPE_I16: return "TYPE_I16";
      case type::TYPE_I32: return "TYPE_I32";
      case type::TYPE_I64: return "TYPE_I64";
      case type::TYPE_DOUBLE: return "TYPE_DOUBLE";
      case type::TYPE_ENUM: return "TYPE_ENUM";
      case type::TYPE_LIST: return "TYPE_LIST";
      case type::TYPE_SET: return "TYPE_SET";
      case type::TYPE_MAP: return "TYPE_MAP";
      case type::TYPE_STRUCT: return "TYPE_STRUCT";
      case type::TYPE_SERVICE: return "TYPE_SERVICE";
      case type::TYPE_PROGRAM: return "TYPE_PROGRAM";
      case type::TYPE_FLOAT: return "TYPE_FLOAT";
      default: return fallback;
    }
  }
};

} // thrift_fatal_impl_detail

FATAL_REGISTER_ENUM_TRAITS(
  ::apache::thrift::reflection::thrift_fatal_impl_detail::Type_enum_traits,
  ::apache::thrift::detail::type_common_metadata_impl<
    reflection_tags::module,
    ::apache::thrift::reflected_annotations<::apache::thrift::reflection::thrift_fatal_impl_detail::Type_enum_traits::annotations>,
    static_cast<::apache::thrift::legacy_type_id_t>(16520330472008301128ull)
  >
);

}}} // apache::thrift::reflection
