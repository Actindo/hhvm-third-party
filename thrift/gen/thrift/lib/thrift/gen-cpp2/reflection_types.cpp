/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/lib/thrift/gen-cpp2/reflection_types.h"

#include "thrift/lib/thrift/gen-cpp2/reflection_types.tcc"

#include <algorithm>

#include <folly/Indestructible.h>

#include "thrift/lib/thrift/gen-cpp2/reflection_data.h"



namespace apache { namespace thrift { namespace reflection { namespace cpp2 {

template uint32_t StructField_read<>(apache::thrift::BinaryProtocolReader*, StructField*);
template uint32_t StructField_write<>(apache::thrift::BinaryProtocolWriter*, const StructField*);
template uint32_t StructField_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const StructField*);
template uint32_t StructField_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const StructField*);
template uint32_t StructField_read<>(apache::thrift::CompactProtocolReader*, StructField*);
template uint32_t StructField_write<>(apache::thrift::CompactProtocolWriter*, const StructField*);
template uint32_t StructField_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const StructField*);
template uint32_t StructField_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const StructField*);

}}}} // apache::thrift::reflection::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace apache { namespace thrift { namespace reflection { namespace cpp2 {

template uint32_t DataType_read<>(apache::thrift::BinaryProtocolReader*, DataType*);
template uint32_t DataType_write<>(apache::thrift::BinaryProtocolWriter*, const DataType*);
template uint32_t DataType_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const DataType*);
template uint32_t DataType_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const DataType*);
template uint32_t DataType_read<>(apache::thrift::CompactProtocolReader*, DataType*);
template uint32_t DataType_write<>(apache::thrift::CompactProtocolWriter*, const DataType*);
template uint32_t DataType_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const DataType*);
template uint32_t DataType_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const DataType*);

}}}} // apache::thrift::reflection::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace apache { namespace thrift { namespace reflection { namespace cpp2 {

template uint32_t Schema_read<>(apache::thrift::BinaryProtocolReader*, Schema*);
template uint32_t Schema_write<>(apache::thrift::BinaryProtocolWriter*, const Schema*);
template uint32_t Schema_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const Schema*);
template uint32_t Schema_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const Schema*);
template uint32_t Schema_read<>(apache::thrift::CompactProtocolReader*, Schema*);
template uint32_t Schema_write<>(apache::thrift::CompactProtocolWriter*, const Schema*);
template uint32_t Schema_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const Schema*);
template uint32_t Schema_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const Schema*);

}}}} // apache::thrift::reflection::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace apache { namespace thrift { namespace reflection { namespace cpp2 {

}}}} // apache::thrift::reflection::cpp2
